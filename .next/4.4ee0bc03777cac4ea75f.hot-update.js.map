{"version":3,"file":"4.4ee0bc03777cac4ea75f.hot-update.js","sources":["webpack:///components/home/run_table/RunTable.js"],"sourcesContent":["import React, { Component } from 'react';\nimport {\n    Table,\n    Input,\n    Button,\n    Icon,\n    InputNumber,\n    Popconfirm,\n    Form\n} from 'antd';\n\nconst data = [];\nfor (let i = 0; i < 100; i++) {\n    data.push({\n        key: i.toString(),\n        name: `Edrward ${i}`,\n        age: 32,\n        address: `London Park no. ${i}`\n    });\n}\nconst FormItem = Form.Item;\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ form, index, ...props }) => (\n    <EditableContext.Provider value={form}>\n        <tr {...props} />\n    </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n    getInput = () => {\n        if (this.props.inputType === 'number') {\n            return <InputNumber size=\"small\" />;\n        }\n        return <Input size=\"small\" />;\n    };\n    onSearch = () => {\n        const { searchText } = this.state;\n        const reg = new RegExp(searchText, 'gi');\n        this.setState({\n            filterDropdownVisible: false,\n            filtered: !!searchText,\n            data: data\n                .map(record => {\n                    const match = record.name.match(reg);\n                    if (!match) {\n                        return null;\n                    }\n                    return {\n                        ...record,\n                        name: (\n                            <span>\n                                {record.name\n                                    .split(reg)\n                                    .map(\n                                        (text, i) =>\n                                            i > 0\n                                                ? [\n                                                      <span className=\"highlight\">\n                                                          {match[0]}\n                                                      </span>,\n                                                      text\n                                                  ]\n                                                : text\n                                    )}\n                            </span>\n                        )\n                    };\n                })\n                .filter(record => !!record)\n        });\n    };\n\n    render() {\n        const {\n            editing,\n            dataIndex,\n            title,\n            inputType,\n            record,\n            index,\n            ...restProps\n        } = this.props;\n        return (\n            <EditableContext.Consumer>\n                {form => {\n                    const { getFieldDecorator } = form;\n                    return (\n                        <td {...restProps}>\n                            {editing ? (\n                                <FormItem>\n                                    {getFieldDecorator(dataIndex, {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: `Please Input ${title}!`\n                                            }\n                                        ],\n                                        initialValue: record[dataIndex]\n                                    })(this.getInput())}\n                                </FormItem>\n                            ) : (\n                                restProps.children\n                            )}\n                        </td>\n                    );\n                }}\n            </EditableContext.Consumer>\n        );\n    }\n}\n\nclass EditableTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data,\n            editingKey: '',\n            filterDropdownVisible: false,\n            searchText: '',\n            filtered: false\n        };\n        this.columns = [\n            {\n                title: 'age',\n                dataIndex: 'age',\n                editable: true\n            },\n            {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n                editable: true,\n                filterDropdown: (\n                    <div className=\"custom-filter-dropdown\">\n                        <Input\n                            ref={ele => (this.searchInput = ele)}\n                            placeholder=\"Search name\"\n                            value={this.state.searchText}\n                            onChange={this.onInputChange}\n                            onPressEnter={this.onSearch}\n                        />\n                        <Button type=\"primary\" onClick={this.onSearch}>\n                            Search\n                        </Button>\n                    </div>\n                ),\n                filterIcon: (\n                    <Icon\n                        type=\"search\"\n                        style={{\n                            color: this.state.filtered ? '#108ee9' : '#aaa'\n                        }}\n                    />\n                ),\n                filterDropdownVisible: this.state.filterDropdownVisible,\n                onFilterDropdownVisibleChange: visible => {\n                    this.setState(\n                        {\n                            filterDropdownVisible: visible\n                        },\n                        () => this.searchInput && this.searchInput.focus()\n                    );\n                }\n            },\n            {\n                title: 'Address',\n                dataIndex: 'address',\n                key: 'address',\n                editable: true,\n                filters: [\n                    {\n                        text: 'London',\n                        value: 'London'\n                    },\n                    {\n                        text: 'New York',\n                        value: 'New York'\n                    }\n                ],\n                onFilter: (value, record) => record.address.indexOf(value) === 0\n            },\n            {\n                title: 'operation',\n                dataIndex: 'operation',\n                render: (text, record) => {\n                    const editable = this.isEditing(record);\n                    return (\n                        <div className=\"editable-row-operations\">\n                            {editable ? (\n                                <span>\n                                    <EditableContext.Consumer>\n                                        {form => (\n                                            <a\n                                                href=\"javascript:;\"\n                                                onClick={() =>\n                                                    this.save(form, record.key)\n                                                }\n                                            >\n                                                Save\n                                            </a>\n                                        )}\n                                    </EditableContext.Consumer>\n                                    <Popconfirm\n                                        title=\"Sure to cancel?\"\n                                        onConfirm={() =>\n                                            this.cancel(record.key)\n                                        }\n                                    >\n                                        <a>Cancel</a>\n                                    </Popconfirm>\n                                </span>\n                            ) : (\n                                <a onClick={() => this.edit(record.key)}>\n                                    Edit\n                                </a>\n                            )}\n                        </div>\n                    );\n                }\n            }\n        ];\n    }\n    onInputChange = e => {\n        this.setState({ searchText: e.target.value });\n    };\n    isEditing = record => {\n        return record.key === this.state.editingKey;\n    };\n    edit(key) {\n        this.setState({ editingKey: key });\n    }\n    save(from, key) {\n        from.validateFields((error, row) => {\n            if (error) {\n                return;\n            }\n            const newData = [...this.state.data];\n            const index = newData.findIndex(item => key === item.key);\n            if (index > -1) {\n                const item = newData[index];\n                newData.splice(index, 1, {\n                    ...item,\n                    ...row\n                });\n                this.setState({ data: newData, editingKey: '' });\n            } else {\n                newData.push(data);\n                this.setState({ data: newData, editingKey: '' });\n            }\n        });\n    }\n    cancel = () => {\n        this.setState({ editingKey: '' });\n    };\n    render() {\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCell\n            }\n        };\n\n        const columns = this.columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    inputType: col.dataIndex === 'age' ? 'number' : 'text',\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    editing: this.isEditing(record)\n                })\n            };\n        });\n\n        const rowSelection = {\n            onChange: (selectedRowKeys, selectedRows) => {\n                console.log(\n                    `selectedRowKeys: ${selectedRowKeys}`,\n                    'selectedRows: ',\n                    selectedRows\n                );\n            },\n            getCheckboxProps: record => ({\n                disabled: record.name === 'Disabled User', // Column configuration not to be checked\n                name: record.name\n            })\n        };\n\n        return (\n            <Table\n                rowSelection={rowSelection}\n                size=\"small\"\n                components={components}\n                bordered\n                dataSource={this.state.data}\n                columns={columns}\n            />\n        );\n    }\n}\n\nexport default EditableTable;\n\n\n\n// WEBPACK FOOTER //\n// components/home/run_table/RunTable.js"],"mappings":"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","sourceRoot":""}